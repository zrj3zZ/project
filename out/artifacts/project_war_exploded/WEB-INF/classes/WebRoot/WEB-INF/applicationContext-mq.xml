<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:amq="http://activemq.apache.org/schema/core"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.2.0.xsd">
    <!-- 
    	推荐版本，使用spring的listenerContainer，消息用数据库持久化保存，服务器重启不会丢失
    	http://activemq.apache.org/spring-support.html
     -->
	<!--  embedded ActiveMQ Broker,内置的ActiveMq服务器 -->
	<amq:broker useJmx="false" persistent="true">
		<amq:persistenceAdapter>
			<amq:jdbcPersistenceAdapter id="jdbcAdapter" dataSource="#dataSource" createTablesOnStartup="false"
										useDatabaseLock="false"/> 
			<!-- 
				Mysql can setup useDatabaseLock="true",this is defualt
				HSQLDB,MSSQL plz setup useDatabaseLock="false",
				if u setup useDatabaseLock="true",u will catch error:
				MSSQL Error Info:FOR UPDATE clause allowed only for DECLARE CURSOR 
				HSQLDB Error Info:FOR in statement [SELECT * FROM ACTIVEMQ_LOCK FOR UPDATE]
				see http://www.nabble.com/ActiveMQ-JDBC-Persistence-with-SQL-Server-tf2022248.html#a5560296
			-->
		</amq:persistenceAdapter>
		<!-- 开发给外部的链接使用tcp方式 -->
		<amq:transportConnectors>
			<amq:transportConnector uri="tcp://localhost:62616"/>
		</amq:transportConnectors>
	</amq:broker>
	<!--  ActiveMQ connectionFactory  -->
	<amq:connectionFactory id="jmsConnectionFactory" brokerURL="vm://localhost"/>
	<!--  ActiveMQ destinations，队列名称  -->
	<amq:queue name="destination" physicalName="org.apache.activemq.spring.Test.spring.embedded"/>
	 	<bean id="errqueue" class="org.apache.activemq.command.ActiveMQQueue">   
   			 <constructor-arg index="0">   
        		<value>tomcatqueue</value>   
    		 </constructor-arg>   
  		</bean>
  		  
	<!--  Spring JmsTemplate config -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory">
			<!--  lets wrap in a pool to avoid creating a connection per send -->
			<bean class="org.springframework.jms.connection.SingleConnectionFactory">
				<property name="targetConnectionFactory" ref="jmsConnectionFactory"/>
			</bean>
		</property>
		<!-- custom MessageConverter -->
		<property name="messageConverter" ref="invokeMessageConverter"/>
	</bean>

	<!--  invokeMessage converter  -->
	<bean id="invokeMessageConverter" class="com.iwork.core.mq.InvokeMessageConverter"/>
	<!-- POJO which send Message uses  Spring JmsTemplate -->
	<bean id="invokeMessageProducer" class="com.iwork.core.mq.InvokeMessageProducer">
		<property name="template" ref="jmsTemplate"/>
		<property name="destination" ref="destination"/>
	</bean>
	<!--  Message Driven POJO (MDP) -->
	<bean id="messageListener" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg>
			<bean class="com.iwork.core.mq.InvokeMessageConsumer">
			</bean>
		</constructor-arg>
		<!--  may be other method -->
		<property name="defaultListenerMethod" value="printMyOut"/>
		<!-- custom MessageConverter define -->
		<property name="messageConverter" ref="invokeMessageConverter"/>
	</bean> 

	<!--  listener container，MDP无需实现接口 -->
	<bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsConnectionFactory"/>
		<property name="destination" ref="destination"/>
		<property name="messageListener" ref="messageListener"/>
	</bean>
	
	<bean id="sysMsgQueueAction"  class="com.iwork.core.mq.action.SysMessageQueueAction" scope="prototype">   
    	<property name="sysMsgQueueService" ref="sysMsgQueueService" /> 
    </bean>
    <bean id="sysMsgQueueService" class="com.iwork.core.mq.service.SysMessageQueueService" scope="prototype">
     	<property name="jmsConnectionFactory" ref="jmsConnectionFactory" />
     	<property name="jmsTemplate" ref="jmsTemplate" />
     	<property name="err_queue" ref="errqueue"/> 
     	<property name="destination" ref="destination"/> 
     	<property name="invokeMessageProducer" ref="invokeMessageProducer" /> 
    </bean>  
      
</beans>